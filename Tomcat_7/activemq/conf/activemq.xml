<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<!--
		Allows us to use system properties as variables in this configuration
		file
	-->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	</bean>

	<!--
		The <broker> element is used to configure the ActiveMQ broker.
	-->
	<broker xmlns="http://activemq.apache.org/schema/core"
		brokerName="gpvActiveMQBroker" dataDirectory="${activemq.base}/data"
		destroyApplicationContextOnStop="true">

		<!--
			For better performances use VM cursor and small memory limit. For
			more information, see:

			http://activemq.apache.org/message-cursors.html Also, if your
			producer is "hanging", it's probably due to producer flow control.
			For more information, see:
			http://activemq.apache.org/producer-flow-control.html
		-->
		<destinationPolicy>
			<policyMap>
				<policyEntries>
					<policyEntry topic=">" producerFlowControl="true"
						memoryLimit="16mb">
						<pendingSubscriberPolicy>
							<fileCursor />
							<!-- <vmCursor /> -->
						</pendingSubscriberPolicy>
					</policyEntry>
					<policyEntry queue=">" producerFlowControl="true"
						memoryLimit="16mb">
						<pendingQueuePolicy>
							<fileQueueCursor />
							<!-- <vmQueueCursor /> -->
						</pendingQueuePolicy>
					</policyEntry>
				</policyEntries>
			</policyMap>
		</destinationPolicy>

		<!--
			The managementContext is used to configure how ActiveMQ is exposed in
			JMX. By default, ActiveMQ uses the MBean server that is started by
			the JVM. For more information, see:

			http://activemq.apache.org/jmx.html
		-->
		<managementContext>
			<managementContext createConnector="false" />
		</managementContext>

		<!--
			Configure message persistence for the broker. The default persistence
			mechanism is the KahaDB store (identified by the kahaDB tag). For
			more information, see: http://activemq.apache.org/persistence.html
		-->
		<persistenceAdapter>
			<kahaDB directory="${activemq.base}/data/kahadb"
				directoryArchive="${activemq.base}/data/kahadb-archive"
				enableJournalDiskSyncs="false" enableIndexWriteAsync="true"
				indexWriteBatchSize="10000" indexCacheSize="1000"
				journalMaxFileLength="32mb" archiveDataLogs="true" />
		</persistenceAdapter>

		<!--
			The systemUsage controls the maximum amount of space the broker will
			use before slowing down producers. For more information, see:

			http://activemq.apache.org/producer-flow-control.html
		-->
		<systemUsage>
			<systemUsage sendFailIfNoSpaceAfterTimeout="5000">
				<memoryUsage>
					<memoryUsage limit="64 mb" />
				</memoryUsage>
				<storeUsage>
					<storeUsage limit="10 gb" />
				</storeUsage>
				<tempUsage>
					<tempUsage limit="1 gb" />
				</tempUsage>
			</systemUsage>
		</systemUsage>

		<!--
			The transport connectors expose ActiveMQ over a given protocol to
			clients and other brokers. For more information, see:

			http://activemq.apache.org/configuring-transports.html
		-->
		<transportConnectors>
			<!--
				<transportConnector name="openwire" uri="tcp://127.0.0.1:61616" />
			-->
			<!--
				<transportConnector name="openwire"
				uri="vm://gpvActiveMQBroker?marshal=false&amp;create=false&amp;broker.persistent=true"
				/>
			-->
		</transportConnectors>
	</broker>
</beans>
