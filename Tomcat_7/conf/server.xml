<?xml version='1.0' encoding='utf-8'?>
	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to You under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
	<!--
		Note: A "Server" is not itself a "Container", so you may not define
		subcomponents such as "Valves" at this level. Documentation at
		/docs/config/server.html
	-->
<Server port="8005" shutdown="SHUTDOWN">
	<!--
		Security listener. Documentation at /docs/config/listeners.html
		<Listener className="org.apache.catalina.security.SecurityListener" />
	-->
	<!--APR library loader. Documentation at /docs/apr.html -->
	<Listener className="org.apache.catalina.core.AprLifecycleListener"
		SSLEngine="on" />
	<!--
		Initialize Jasper prior to webapps are loaded. Documentation at
		/docs/jasper-howto.html
	-->
	<Listener className="org.apache.catalina.core.JasperListener" />
	<!-- Prevent memory leaks due to use of particular java/javax APIs-->
	<Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
	<Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
	<Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

	<!--
		Global JNDI resources Documentation at /docs/jndi-resources-howto.html
	-->
	<GlobalNamingResources>
		<!--
			Editable user database that can also be used by UserDatabaseRealm to
			authenticate users
		-->
		<Resource name="UserDatabase" auth="Container"
			type="org.apache.catalina.UserDatabase" description="User database that can be updated and saved"
			factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
			pathname="conf/tomcat-users.xml" />
	</GlobalNamingResources>

	<!--
		A "Service" is a collection of one or more "Connectors" that share a
		single "Container" Note: A "Service" is not itself a "Container", so
		you may not define subcomponents such as "Valves" at this level.
		Documentation at /docs/config/service.html
	-->
	<Service name="Catalina">
		<!--
			The connectors can use a shared executor, you can define one or more
			named thread pools
		-->
		<!--
			<Executor name="tomcatThreadPool" daemon="true"
			namePrefix="catalina-exec-" maxThreads="400" minSpareThreads="20"
			maxIdleTime="300000" prestartminSpareThreads="true" />
		-->

		<!--
			A "Connector" represents an endpoint by which requests are received
			and responses are returned. Documentation at : Java HTTP Connector:
			/docs/config/http.html (blocking & non-blocking) Java AJP Connector:
			/docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.html Define
			a non-SSL HTTP/1.1 Connector on port 8080
		-->
		<!--
			HTTP/1.1 connector: - [acceptCount]: The maximum queue length for
			incoming connection requests when all possible request processing
			threads are in use. Any requests received when the queue is full will
			be refused / - [tcpNoDelay]: set to false if having issue with the OS
		-->
		<Connector port="8080" protocol="org.apache.coyote.http11.Http11Protocol"
			allowTrace="false" asyncTimeout="5000" enableLookups="false"
			maxPostSize="131072" maxSavePostSize="-1" redirectPort="8443" scheme="http"
			URIEncoding="UTF-8" acceptCount="100000" acceptorThreadCount="64"
			connectionTimeout="10000" connectionUploadTimeout="60000"
			disableUploadTimeout="false" maxConnections="128" maxHttpHeaderSize="4096"
			maxKeepAliveRequests="100" maxThreads="128" minSpareThreads="64"
			processorCache="128" socketBuffer="8192" tcpNoDelay="true"
			socket.performanceConnectionTime="2" socket.performanceLatency="1"
			socket.performanceBandwidth="0" disableKeepAlivePercentage="50" />

		<!--
			HTTP/1.1/NIO connector: - [pollerThreadCount]: The number of threads
			to be used to run for the polling events. Default value is 1 per
			processor. Can't see a reason to go above that. But experiment and
			find your own results. / - [selectorTimeout]: The time in
			milliseconds to timeout on a select() for the poller. This value is
			important, since connection clean up is done on the same thread, so
			do not set this value to an extremely high one. The default value is
			1000 milliseconds. / - [tcpNoDelay]: set to false if having issue
			with the OS
		-->
		<Connector port="8081" protocol="org.apache.coyote.http11.Http11NioProtocol"
			allowTrace="false" asyncTimeout="5000" enableLookups="false"
			maxPostSize="131072" maxSavePostSize="-1" redirectPort="8443" scheme="http"
			URIEncoding="UTF-8" acceptCount="100000" acceptorThreadCount="64"
			connectionTimeout="10000" connectionUploadTimeout="60000"
			disableUploadTimeout="false" maxConnections="10240"
			maxHttpHeaderSize="4096" maxKeepAliveRequests="100" maxThreads="128"
			minSpareThreads="64" processorCache="128" socketBuffer="8192"
			tcpNoDelay="true" socket.performanceConnectionTime="2"
			socket.performanceLatency="1" socket.performanceBandwidth="0"
			pollerThreadCount="16" selectorTimeout="1000" socket.appReadBufSize="4096"
			socket.appWriteBufSize="4096" />


		<!--
			Define a SSL HTTP/1.1 Connector on port 8443 This connector uses the
			JSSE configuration, when using APR, the connector should be using the
			OpenSSL style configuration described in the APR documentation
		-->
		<!--
			<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
			maxThreads="150" scheme="https" secure="true" clientAuth="false"
			sslProtocol="TLS" />
		-->

		<!-- Define an AJP 1.3 Connector on port 8009 -->
		<!--
			<Connector port="8009" protocol="AJP/1.3" redirectPort="8443"
			allowTrace="false" enableLookups="false" maxPostSize="131072"
			connectionTimeout="1000" />
		-->

		<!--
			An Engine represents the entry point (within Catalina) that processes
			every request. The Engine implementation for Tomcat stand alone
			analyzes the HTTP headers included with the request, and passes them
			on to the appropriate Host (virtual host). Documentation at
			/docs/config/engine.html
		-->

		<!--
			You should set jvmRoute to support load-balancing via AJP ie :
			<Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
		-->
		<Engine name="Catalina" defaultHost="localhost" jvmRoute="GpvServerNode01">

			<!-- Simple Clustering setup! -->

			<!--
				For clustering, please take a look at documentation at:
				/docs/cluster-howto.html (simple how to) /docs/config/cluster.html
				(reference documentation)
			-->
			<Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster" />

			<!--
				Use the LockOutRealm to prevent attempts to guess user passwords via
				a brute-force attack
			-->
			<Realm className="org.apache.catalina.realm.LockOutRealm">
				<!--
					This Realm uses the UserDatabase configured in the global JNDI
					resources under the key "UserDatabase". Any edits that are
					performed against this UserDatabase are immediately available for
					use by the Realm.
				-->
				<Realm className="org.apache.catalina.realm.UserDatabaseRealm"
					resourceName="UserDatabase" />
			</Realm>

			<Host name="localhost" appBase="webapps" unpackWARs="true"
				autoDeploy="true">

				<!--
					SingleSignOn valve, share authentication between web applications
					Documentation at: /docs/config/valve.html
				-->
				<!--
					<Valve className="org.apache.catalina.authenticator.SingleSignOn"
					/>
				-->

				<!--
					Access log processes all example. Documentation at:
					/docs/config/valve.html Note: The pattern used is equivalent to
					using pattern="common"
				-->
				<Valve className="org.apache.catalina.valves.AccessLogValve"
					directory="logs" prefix="localhost_access_log." suffix=".txt"
					pattern="%h %l %u %t &quot;%r&quot; %s %b" resolveHosts="false" />
			</Host>
		</Engine>
	</Service>
</Server>
